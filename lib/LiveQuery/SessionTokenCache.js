"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SessionTokenCache = void 0;

var _node = _interopRequireDefault(require("parse/node"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _logger = _interopRequireDefault(require("../logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function userForSessionToken(sessionToken) {
  var q = new _node.default.Query('_Session');
  q.equalTo('sessionToken', sessionToken);
  return q.first({
    useMasterKey: true
  }).then(function (session) {
    if (!session) {
      return Promise.reject('No session found for session token');
    }

    return session.get('user');
  });
}

class SessionTokenCache {
  constructor(timeout = 30 * 24 * 60 * 60 * 1000, maxSize = 10000) {
    this.cache = new _lruCache.default({
      max: maxSize,
      maxAge: timeout
    });
  }

  getUserId(sessionToken) {
    if (!sessionToken) {
      return Promise.reject('Empty sessionToken');
    }

    const userId = this.cache.get(sessionToken);

    if (userId) {
      _logger.default.verbose('Fetch userId %s of sessionToken %s from Cache', userId, sessionToken);

      return Promise.resolve(userId);
    }

    return userForSessionToken(sessionToken).then(user => {
      _logger.default.verbose('Fetch userId %s of sessionToken %s from Parse', user.id, sessionToken);

      const userId = user.id;
      this.cache.set(sessionToken, userId);
      return Promise.resolve(userId);
    }, error => {
      _logger.default.error('Can not fetch userId for sessionToken %j, error %j', sessionToken, error);

      return Promise.reject(error);
    });
  }

}

exports.SessionTokenCache = SessionTokenCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXZlUXVlcnkvU2Vzc2lvblRva2VuQ2FjaGUuanMiXSwibmFtZXMiOlsidXNlckZvclNlc3Npb25Ub2tlbiIsInNlc3Npb25Ub2tlbiIsInEiLCJQYXJzZSIsIlF1ZXJ5IiwiZXF1YWxUbyIsImZpcnN0IiwidXNlTWFzdGVyS2V5IiwidGhlbiIsInNlc3Npb24iLCJQcm9taXNlIiwicmVqZWN0IiwiZ2V0IiwiU2Vzc2lvblRva2VuQ2FjaGUiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJtYXhTaXplIiwiY2FjaGUiLCJMUlUiLCJtYXgiLCJtYXhBZ2UiLCJnZXRVc2VySWQiLCJ1c2VySWQiLCJsb2dnZXIiLCJ2ZXJib3NlIiwicmVzb2x2ZSIsInVzZXIiLCJpZCIsInNldCIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxTQUFTQSxtQkFBVCxDQUE2QkMsWUFBN0IsRUFBMkM7QUFDekMsTUFBSUMsQ0FBQyxHQUFHLElBQUlDLGNBQU1DLEtBQVYsQ0FBZ0IsVUFBaEIsQ0FBUjtBQUNBRixFQUFBQSxDQUFDLENBQUNHLE9BQUYsQ0FBVSxjQUFWLEVBQTBCSixZQUExQjtBQUNBLFNBQU9DLENBQUMsQ0FBQ0ksS0FBRixDQUFRO0FBQUVDLElBQUFBLFlBQVksRUFBRTtBQUFoQixHQUFSLEVBQWdDQyxJQUFoQyxDQUFxQyxVQUFVQyxPQUFWLEVBQW1CO0FBQzdELFFBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1osYUFBT0MsT0FBTyxDQUFDQyxNQUFSLENBQWUsb0NBQWYsQ0FBUDtBQUNEOztBQUNELFdBQU9GLE9BQU8sQ0FBQ0csR0FBUixDQUFZLE1BQVosQ0FBUDtBQUNELEdBTE0sQ0FBUDtBQU1EOztBQUVELE1BQU1DLGlCQUFOLENBQXdCO0FBR3RCQyxFQUFBQSxXQUFXLENBQ1RDLE9BQWUsR0FBRyxLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsRUFBZixHQUFvQixJQUQ3QixFQUVUQyxPQUFlLEdBQUcsS0FGVCxFQUdUO0FBQ0EsU0FBS0MsS0FBTCxHQUFhLElBQUlDLGlCQUFKLENBQVE7QUFDbkJDLE1BQUFBLEdBQUcsRUFBRUgsT0FEYztBQUVuQkksTUFBQUEsTUFBTSxFQUFFTDtBQUZXLEtBQVIsQ0FBYjtBQUlEOztBQUVETSxFQUFBQSxTQUFTLENBQUNwQixZQUFELEVBQTRCO0FBQ25DLFFBQUksQ0FBQ0EsWUFBTCxFQUFtQjtBQUNqQixhQUFPUyxPQUFPLENBQUNDLE1BQVIsQ0FBZSxvQkFBZixDQUFQO0FBQ0Q7O0FBQ0QsVUFBTVcsTUFBTSxHQUFHLEtBQUtMLEtBQUwsQ0FBV0wsR0FBWCxDQUFlWCxZQUFmLENBQWY7O0FBQ0EsUUFBSXFCLE1BQUosRUFBWTtBQUNWQyxzQkFBT0MsT0FBUCxDQUNFLCtDQURGLEVBRUVGLE1BRkYsRUFHRXJCLFlBSEY7O0FBS0EsYUFBT1MsT0FBTyxDQUFDZSxPQUFSLENBQWdCSCxNQUFoQixDQUFQO0FBQ0Q7O0FBQ0QsV0FBT3RCLG1CQUFtQixDQUFDQyxZQUFELENBQW5CLENBQWtDTyxJQUFsQyxDQUNMa0IsSUFBSSxJQUFJO0FBQ05ILHNCQUFPQyxPQUFQLENBQ0UsK0NBREYsRUFFRUUsSUFBSSxDQUFDQyxFQUZQLEVBR0UxQixZQUhGOztBQUtBLFlBQU1xQixNQUFNLEdBQUdJLElBQUksQ0FBQ0MsRUFBcEI7QUFDQSxXQUFLVixLQUFMLENBQVdXLEdBQVgsQ0FBZTNCLFlBQWYsRUFBNkJxQixNQUE3QjtBQUNBLGFBQU9aLE9BQU8sQ0FBQ2UsT0FBUixDQUFnQkgsTUFBaEIsQ0FBUDtBQUNELEtBVkksRUFXTE8sS0FBSyxJQUFJO0FBQ1BOLHNCQUFPTSxLQUFQLENBQ0Usb0RBREYsRUFFRTVCLFlBRkYsRUFHRTRCLEtBSEY7O0FBS0EsYUFBT25CLE9BQU8sQ0FBQ0MsTUFBUixDQUFla0IsS0FBZixDQUFQO0FBQ0QsS0FsQkksQ0FBUDtBQW9CRDs7QUE5Q3FCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBhcnNlIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IExSVSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5mdW5jdGlvbiB1c2VyRm9yU2Vzc2lvblRva2VuKHNlc3Npb25Ub2tlbikge1xuICB2YXIgcSA9IG5ldyBQYXJzZS5RdWVyeSgnX1Nlc3Npb24nKTtcbiAgcS5lcXVhbFRvKCdzZXNzaW9uVG9rZW4nLCBzZXNzaW9uVG9rZW4pO1xuICByZXR1cm4gcS5maXJzdCh7IHVzZU1hc3RlcktleTogdHJ1ZSB9KS50aGVuKGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgaWYgKCFzZXNzaW9uKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoJ05vIHNlc3Npb24gZm91bmQgZm9yIHNlc3Npb24gdG9rZW4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlc3Npb24uZ2V0KCd1c2VyJyk7XG4gIH0pO1xufVxuXG5jbGFzcyBTZXNzaW9uVG9rZW5DYWNoZSB7XG4gIGNhY2hlOiBPYmplY3Q7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgdGltZW91dDogbnVtYmVyID0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgIG1heFNpemU6IG51bWJlciA9IDEwMDAwXG4gICkge1xuICAgIHRoaXMuY2FjaGUgPSBuZXcgTFJVKHtcbiAgICAgIG1heDogbWF4U2l6ZSxcbiAgICAgIG1heEFnZTogdGltZW91dCxcbiAgICB9KTtcbiAgfVxuXG4gIGdldFVzZXJJZChzZXNzaW9uVG9rZW46IHN0cmluZyk6IGFueSB7XG4gICAgaWYgKCFzZXNzaW9uVG9rZW4pIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgnRW1wdHkgc2Vzc2lvblRva2VuJyk7XG4gICAgfVxuICAgIGNvbnN0IHVzZXJJZCA9IHRoaXMuY2FjaGUuZ2V0KHNlc3Npb25Ub2tlbik7XG4gICAgaWYgKHVzZXJJZCkge1xuICAgICAgbG9nZ2VyLnZlcmJvc2UoXG4gICAgICAgICdGZXRjaCB1c2VySWQgJXMgb2Ygc2Vzc2lvblRva2VuICVzIGZyb20gQ2FjaGUnLFxuICAgICAgICB1c2VySWQsXG4gICAgICAgIHNlc3Npb25Ub2tlblxuICAgICAgKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXNlcklkKTtcbiAgICB9XG4gICAgcmV0dXJuIHVzZXJGb3JTZXNzaW9uVG9rZW4oc2Vzc2lvblRva2VuKS50aGVuKFxuICAgICAgdXNlciA9PiB7XG4gICAgICAgIGxvZ2dlci52ZXJib3NlKFxuICAgICAgICAgICdGZXRjaCB1c2VySWQgJXMgb2Ygc2Vzc2lvblRva2VuICVzIGZyb20gUGFyc2UnLFxuICAgICAgICAgIHVzZXIuaWQsXG4gICAgICAgICAgc2Vzc2lvblRva2VuXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IHVzZXJJZCA9IHVzZXIuaWQ7XG4gICAgICAgIHRoaXMuY2FjaGUuc2V0KHNlc3Npb25Ub2tlbiwgdXNlcklkKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1c2VySWQpO1xuICAgICAgfSxcbiAgICAgIGVycm9yID0+IHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFxuICAgICAgICAgICdDYW4gbm90IGZldGNoIHVzZXJJZCBmb3Igc2Vzc2lvblRva2VuICVqLCBlcnJvciAlaicsXG4gICAgICAgICAgc2Vzc2lvblRva2VuLFxuICAgICAgICAgIGVycm9yXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBTZXNzaW9uVG9rZW5DYWNoZSB9O1xuIl19