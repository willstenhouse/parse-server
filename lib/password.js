"use strict";

// Tools for encrypting and decrypting passwords.
// Basically promise-friendly wrappers for bcrypt.
var bcrypt = require('bcryptjs');

try {
  const _bcrypt = require('@node-rs/bcrypt');

  bcrypt = {
    hash: _bcrypt.hash,
    compare: _bcrypt.verify
  };
} catch (e) {}
/* */
// Returns a promise for a hashed password string.


function hash(password) {
  return bcrypt.hash(password, 10);
} // Returns a promise for whether this password compares to equal this
// hashed password.


function compare(password, hashedPassword) {
  // Cannot bcrypt compare when one is undefined
  if (!password || !hashedPassword) {
    return Promise.resolve(false);
  }

  return bcrypt.compare(password, hashedPassword);
}

module.exports = {
  hash: hash,
  compare: compare
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wYXNzd29yZC5qcyJdLCJuYW1lcyI6WyJiY3J5cHQiLCJyZXF1aXJlIiwiX2JjcnlwdCIsImhhc2giLCJjb21wYXJlIiwidmVyaWZ5IiwiZSIsInBhc3N3b3JkIiwiaGFzaGVkUGFzc3dvcmQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBRUEsSUFBSTtBQUNGLFFBQU1DLE9BQU8sR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQXZCOztBQUNBRCxFQUFBQSxNQUFNLEdBQUc7QUFDUEcsSUFBQUEsSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBRFA7QUFFUEMsSUFBQUEsT0FBTyxFQUFFRixPQUFPLENBQUNHO0FBRlYsR0FBVDtBQUlELENBTkQsQ0FNRSxPQUFPQyxDQUFQLEVBQVUsQ0FFWDtBQURDO0FBR0Y7OztBQUNBLFNBQVNILElBQVQsQ0FBY0ksUUFBZCxFQUF3QjtBQUN0QixTQUFPUCxNQUFNLENBQUNHLElBQVAsQ0FBWUksUUFBWixFQUFzQixFQUF0QixDQUFQO0FBQ0QsQyxDQUVEO0FBQ0E7OztBQUNBLFNBQVNILE9BQVQsQ0FBaUJHLFFBQWpCLEVBQTJCQyxjQUEzQixFQUEyQztBQUN6QztBQUNBLE1BQUksQ0FBQ0QsUUFBRCxJQUFhLENBQUNDLGNBQWxCLEVBQWtDO0FBQ2hDLFdBQU9DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQixLQUFoQixDQUFQO0FBQ0Q7O0FBQ0QsU0FBT1YsTUFBTSxDQUFDSSxPQUFQLENBQWVHLFFBQWYsRUFBeUJDLGNBQXpCLENBQVA7QUFDRDs7QUFFREcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZULEVBQUFBLElBQUksRUFBRUEsSUFEUztBQUVmQyxFQUFBQSxPQUFPLEVBQUVBO0FBRk0sQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUb29scyBmb3IgZW5jcnlwdGluZyBhbmQgZGVjcnlwdGluZyBwYXNzd29yZHMuXG4vLyBCYXNpY2FsbHkgcHJvbWlzZS1mcmllbmRseSB3cmFwcGVycyBmb3IgYmNyeXB0LlxudmFyIGJjcnlwdCA9IHJlcXVpcmUoJ2JjcnlwdGpzJyk7XG5cbnRyeSB7XG4gIGNvbnN0IF9iY3J5cHQgPSByZXF1aXJlKCdAbm9kZS1ycy9iY3J5cHQnKTtcbiAgYmNyeXB0ID0ge1xuICAgIGhhc2g6IF9iY3J5cHQuaGFzaCxcbiAgICBjb21wYXJlOiBfYmNyeXB0LnZlcmlmeSxcbiAgfTtcbn0gY2F0Y2ggKGUpIHtcbiAgLyogKi9cbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgZm9yIGEgaGFzaGVkIHBhc3N3b3JkIHN0cmluZy5cbmZ1bmN0aW9uIGhhc2gocGFzc3dvcmQpIHtcbiAgcmV0dXJuIGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCk7XG59XG5cbi8vIFJldHVybnMgYSBwcm9taXNlIGZvciB3aGV0aGVyIHRoaXMgcGFzc3dvcmQgY29tcGFyZXMgdG8gZXF1YWwgdGhpc1xuLy8gaGFzaGVkIHBhc3N3b3JkLlxuZnVuY3Rpb24gY29tcGFyZShwYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpIHtcbiAgLy8gQ2Fubm90IGJjcnlwdCBjb21wYXJlIHdoZW4gb25lIGlzIHVuZGVmaW5lZFxuICBpZiAoIXBhc3N3b3JkIHx8ICFoYXNoZWRQYXNzd29yZCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICB9XG4gIHJldHVybiBiY3J5cHQuY29tcGFyZShwYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaGFzaDogaGFzaCxcbiAgY29tcGFyZTogY29tcGFyZSxcbn07XG4iXX0=