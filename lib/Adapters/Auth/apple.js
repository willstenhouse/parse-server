"use strict";

const Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

const NodeRSA = require('node-rsa');

const jwt = require('jsonwebtoken');

const TOKEN_ISSUER = 'https://appleid.apple.com';
let currentKey;

const getApplePublicKey = async () => {
  let data;

  try {
    data = await httpsRequest.get('https://appleid.apple.com/auth/keys');
  } catch (e) {
    if (currentKey) {
      return currentKey;
    }

    throw e;
  }

  const key = data.keys[0];
  const pubKey = new NodeRSA();
  pubKey.importKey({
    n: Buffer.from(key.n, 'base64'),
    e: Buffer.from(key.e, 'base64')
  }, 'components-public');
  currentKey = pubKey.exportKey(['public']);
  return currentKey;
};

const verifyIdToken = async ({
  token,
  id
}, clientID) => {
  if (!token) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'id token is invalid for this user.');
  }

  const applePublicKey = await getApplePublicKey();
  const jwtClaims = jwt.verify(token, applePublicKey, {
    algorithms: 'RS256'
  });

  if (jwtClaims.iss !== TOKEN_ISSUER) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`);
  }

  if (jwtClaims.sub !== id) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);
  }

  if (clientID !== undefined && jwtClaims.aud !== clientID) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `jwt aud parameter does not include this client - is: ${jwtClaims.aud} | expected: ${clientID}`);
  }

  return jwtClaims;
}; // Returns a promise that fulfills if this id token is valid


function validateAuthData(authData, options = {}) {
  return verifyIdToken(authData, options.client_id);
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2FwcGxlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsImh0dHBzUmVxdWVzdCIsIk5vZGVSU0EiLCJqd3QiLCJUT0tFTl9JU1NVRVIiLCJjdXJyZW50S2V5IiwiZ2V0QXBwbGVQdWJsaWNLZXkiLCJkYXRhIiwiZ2V0IiwiZSIsImtleSIsImtleXMiLCJwdWJLZXkiLCJpbXBvcnRLZXkiLCJuIiwiQnVmZmVyIiwiZnJvbSIsImV4cG9ydEtleSIsInZlcmlmeUlkVG9rZW4iLCJ0b2tlbiIsImlkIiwiY2xpZW50SUQiLCJFcnJvciIsIk9CSkVDVF9OT1RfRk9VTkQiLCJhcHBsZVB1YmxpY0tleSIsImp3dENsYWltcyIsInZlcmlmeSIsImFsZ29yaXRobXMiLCJpc3MiLCJzdWIiLCJ1bmRlZmluZWQiLCJhdWQiLCJ2YWxpZGF0ZUF1dGhEYXRhIiwiYXV0aERhdGEiLCJvcHRpb25zIiwiY2xpZW50X2lkIiwidmFsaWRhdGVBcHBJZCIsIlByb21pc2UiLCJyZXNvbHZlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQVAsQ0FBc0JELEtBQXBDOztBQUNBLE1BQU1FLFlBQVksR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQTVCOztBQUNBLE1BQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFVBQUQsQ0FBdkI7O0FBQ0EsTUFBTUcsR0FBRyxHQUFHSCxPQUFPLENBQUMsY0FBRCxDQUFuQjs7QUFFQSxNQUFNSSxZQUFZLEdBQUcsMkJBQXJCO0FBRUEsSUFBSUMsVUFBSjs7QUFFQSxNQUFNQyxpQkFBaUIsR0FBRyxZQUFZO0FBQ3BDLE1BQUlDLElBQUo7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxJQUFJLEdBQUcsTUFBTU4sWUFBWSxDQUFDTyxHQUFiLENBQWlCLHFDQUFqQixDQUFiO0FBQ0QsR0FGRCxDQUVFLE9BQU9DLENBQVAsRUFBVTtBQUNWLFFBQUlKLFVBQUosRUFBZ0I7QUFDZCxhQUFPQSxVQUFQO0FBQ0Q7O0FBQ0QsVUFBTUksQ0FBTjtBQUNEOztBQUVELFFBQU1DLEdBQUcsR0FBR0gsSUFBSSxDQUFDSSxJQUFMLENBQVUsQ0FBVixDQUFaO0FBRUEsUUFBTUMsTUFBTSxHQUFHLElBQUlWLE9BQUosRUFBZjtBQUNBVSxFQUFBQSxNQUFNLENBQUNDLFNBQVAsQ0FDRTtBQUFFQyxJQUFBQSxDQUFDLEVBQUVDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZTixHQUFHLENBQUNJLENBQWhCLEVBQW1CLFFBQW5CLENBQUw7QUFBbUNMLElBQUFBLENBQUMsRUFBRU0sTUFBTSxDQUFDQyxJQUFQLENBQVlOLEdBQUcsQ0FBQ0QsQ0FBaEIsRUFBbUIsUUFBbkI7QUFBdEMsR0FERixFQUVFLG1CQUZGO0FBSUFKLEVBQUFBLFVBQVUsR0FBR08sTUFBTSxDQUFDSyxTQUFQLENBQWlCLENBQUMsUUFBRCxDQUFqQixDQUFiO0FBQ0EsU0FBT1osVUFBUDtBQUNELENBcEJEOztBQXNCQSxNQUFNYSxhQUFhLEdBQUcsT0FBTztBQUFFQyxFQUFBQSxLQUFGO0FBQVNDLEVBQUFBO0FBQVQsQ0FBUCxFQUFzQkMsUUFBdEIsS0FBbUM7QUFDdkQsTUFBSSxDQUFDRixLQUFMLEVBQVk7QUFDVixVQUFNLElBQUlwQixLQUFLLENBQUN1QixLQUFWLENBQ0p2QixLQUFLLENBQUN1QixLQUFOLENBQVlDLGdCQURSLEVBRUosb0NBRkksQ0FBTjtBQUlEOztBQUNELFFBQU1DLGNBQWMsR0FBRyxNQUFNbEIsaUJBQWlCLEVBQTlDO0FBQ0EsUUFBTW1CLFNBQVMsR0FBR3RCLEdBQUcsQ0FBQ3VCLE1BQUosQ0FBV1AsS0FBWCxFQUFrQkssY0FBbEIsRUFBa0M7QUFBRUcsSUFBQUEsVUFBVSxFQUFFO0FBQWQsR0FBbEMsQ0FBbEI7O0FBRUEsTUFBSUYsU0FBUyxDQUFDRyxHQUFWLEtBQWtCeEIsWUFBdEIsRUFBb0M7QUFDbEMsVUFBTSxJQUFJTCxLQUFLLENBQUN1QixLQUFWLENBQ0p2QixLQUFLLENBQUN1QixLQUFOLENBQVlDLGdCQURSLEVBRUgsOERBQTZEbkIsWUFBYSxZQUFXcUIsU0FBUyxDQUFDRyxHQUFJLEVBRmhHLENBQU47QUFJRDs7QUFDRCxNQUFJSCxTQUFTLENBQUNJLEdBQVYsS0FBa0JULEVBQXRCLEVBQTBCO0FBQ3hCLFVBQU0sSUFBSXJCLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSCxxQ0FGRyxDQUFOO0FBSUQ7O0FBQ0QsTUFBSUYsUUFBUSxLQUFLUyxTQUFiLElBQTBCTCxTQUFTLENBQUNNLEdBQVYsS0FBa0JWLFFBQWhELEVBQTBEO0FBQ3hELFVBQU0sSUFBSXRCLEtBQUssQ0FBQ3VCLEtBQVYsQ0FDSnZCLEtBQUssQ0FBQ3VCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSCx3REFBdURFLFNBQVMsQ0FBQ00sR0FBSSxnQkFBZVYsUUFBUyxFQUYxRixDQUFOO0FBSUQ7O0FBQ0QsU0FBT0ksU0FBUDtBQUNELENBN0JELEMsQ0ErQkE7OztBQUNBLFNBQVNPLGdCQUFULENBQTBCQyxRQUExQixFQUFvQ0MsT0FBTyxHQUFHLEVBQTlDLEVBQWtEO0FBQ2hELFNBQU9oQixhQUFhLENBQUNlLFFBQUQsRUFBV0MsT0FBTyxDQUFDQyxTQUFuQixDQUFwQjtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QixTQUFPQyxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkosRUFBQUEsYUFEZTtBQUVmSixFQUFBQTtBQUZlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuY29uc3QgTm9kZVJTQSA9IHJlcXVpcmUoJ25vZGUtcnNhJyk7XG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcblxuY29uc3QgVE9LRU5fSVNTVUVSID0gJ2h0dHBzOi8vYXBwbGVpZC5hcHBsZS5jb20nO1xuXG5sZXQgY3VycmVudEtleTtcblxuY29uc3QgZ2V0QXBwbGVQdWJsaWNLZXkgPSBhc3luYyAoKSA9PiB7XG4gIGxldCBkYXRhO1xuICB0cnkge1xuICAgIGRhdGEgPSBhd2FpdCBodHRwc1JlcXVlc3QuZ2V0KCdodHRwczovL2FwcGxlaWQuYXBwbGUuY29tL2F1dGgva2V5cycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGN1cnJlbnRLZXkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50S2V5O1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgY29uc3Qga2V5ID0gZGF0YS5rZXlzWzBdO1xuXG4gIGNvbnN0IHB1YktleSA9IG5ldyBOb2RlUlNBKCk7XG4gIHB1YktleS5pbXBvcnRLZXkoXG4gICAgeyBuOiBCdWZmZXIuZnJvbShrZXkubiwgJ2Jhc2U2NCcpLCBlOiBCdWZmZXIuZnJvbShrZXkuZSwgJ2Jhc2U2NCcpIH0sXG4gICAgJ2NvbXBvbmVudHMtcHVibGljJ1xuICApO1xuICBjdXJyZW50S2V5ID0gcHViS2V5LmV4cG9ydEtleShbJ3B1YmxpYyddKTtcbiAgcmV0dXJuIGN1cnJlbnRLZXk7XG59O1xuXG5jb25zdCB2ZXJpZnlJZFRva2VuID0gYXN5bmMgKHsgdG9rZW4sIGlkIH0sIGNsaWVudElEKSA9PiB7XG4gIGlmICghdG9rZW4pIHtcbiAgICB0aHJvdyBuZXcgUGFyc2UuRXJyb3IoXG4gICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgJ2lkIHRva2VuIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nXG4gICAgKTtcbiAgfVxuICBjb25zdCBhcHBsZVB1YmxpY0tleSA9IGF3YWl0IGdldEFwcGxlUHVibGljS2V5KCk7XG4gIGNvbnN0IGp3dENsYWltcyA9IGp3dC52ZXJpZnkodG9rZW4sIGFwcGxlUHVibGljS2V5LCB7IGFsZ29yaXRobXM6ICdSUzI1NicgfSk7XG5cbiAgaWYgKGp3dENsYWltcy5pc3MgIT09IFRPS0VOX0lTU1VFUikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgaWQgdG9rZW4gbm90IGlzc3VlZCBieSBjb3JyZWN0IE9wZW5JRCBwcm92aWRlciAtIGV4cGVjdGVkOiAke1RPS0VOX0lTU1VFUn0gfCBmcm9tOiAke2p3dENsYWltcy5pc3N9YFxuICAgICk7XG4gIH1cbiAgaWYgKGp3dENsYWltcy5zdWIgIT09IGlkKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBhdXRoIGRhdGEgaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLmBcbiAgICApO1xuICB9XG4gIGlmIChjbGllbnRJRCAhPT0gdW5kZWZpbmVkICYmIGp3dENsYWltcy5hdWQgIT09IGNsaWVudElEKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBqd3QgYXVkIHBhcmFtZXRlciBkb2VzIG5vdCBpbmNsdWRlIHRoaXMgY2xpZW50IC0gaXM6ICR7and0Q2xhaW1zLmF1ZH0gfCBleHBlY3RlZDogJHtjbGllbnRJRH1gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gand0Q2xhaW1zO1xufTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZiB0aGlzIGlkIHRva2VuIGlzIHZhbGlkXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIHZlcmlmeUlkVG9rZW4oYXV0aERhdGEsIG9wdGlvbnMuY2xpZW50X2lkKTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZiB0aGlzIGFwcCBpZCBpcyB2YWxpZC5cbmZ1bmN0aW9uIHZhbGlkYXRlQXBwSWQoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19